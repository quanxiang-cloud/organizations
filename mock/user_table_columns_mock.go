// Code generated by MockGen. DO NOT EDIT.
// Source: user_talble_columns.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	org "github.com/quanxiang-cloud/organizations/internal/models/org"
	gorm "gorm.io/gorm"
)

// MockUserTableColumnsRepo is a mock of UserTableColumnsRepo interface.
type MockUserTableColumnsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserTableColumnsRepoMockRecorder
}

// MockUserTableColumnsRepoMockRecorder is the mock recorder for MockUserTableColumnsRepo.
type MockUserTableColumnsRepoMockRecorder struct {
	mock *MockUserTableColumnsRepo
}

// NewMockUserTableColumnsRepo creates a new mock instance.
func NewMockUserTableColumnsRepo(ctrl *gomock.Controller) *MockUserTableColumnsRepo {
	mock := &MockUserTableColumnsRepo{ctrl: ctrl}
	mock.recorder = &MockUserTableColumnsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserTableColumnsRepo) EXPECT() *MockUserTableColumnsRepoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserTableColumnsRepo) Delete(ctx context.Context, tx *gorm.DB, id string) error {

	ret := m.ctrl.Call(m, "Delete", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserTableColumnsRepoMockRecorder) Delete(ctx, tx, id interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserTableColumnsRepo)(nil).Delete), ctx, tx, id)
}

// GetAll mocks base method.
func (m *MockUserTableColumnsRepo) GetAll(ctx context.Context, db *gorm.DB, status int) ([]org.UserTableColumns, int64) {

	ret := m.ctrl.Call(m, "GetAll", ctx, db, status)
	ret0, _ := ret[0].([]org.UserTableColumns)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockUserTableColumnsRepoMockRecorder) GetAll(ctx, db, status interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUserTableColumnsRepo)(nil).GetAll), ctx, db, status)
}

// GetFilter mocks base method.
func (m *MockUserTableColumnsRepo) GetFilter(ctx context.Context, db *gorm.DB, status, attr int) ([]org.UserTableColumns, map[string]string) {

	_ = m.ctrl.Call(m, "GetFilter", ctx, db, status, attr)

	return nil, nil
}

// GetFilter indicates an expected call of GetFilter.
func (mr *MockUserTableColumnsRepoMockRecorder) GetFilter(ctx, db, status, attr interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilter", reflect.TypeOf((*MockUserTableColumnsRepo)(nil).GetFilter), ctx, db, status, attr)
}

// GetXlsxField mocks base method.
func (m *MockUserTableColumnsRepo) GetXlsxField(ctx context.Context, db *gorm.DB, status int) map[string]string {

	_ = m.ctrl.Call(m, "GetXlsxField", ctx, db, status)
	//ret0, _ := ret[0].(map[string]string)
	ret0 := make(map[string]string)
	ret0["test"] = "test"
	return ret0
}

// GetXlsxField indicates an expected call of GetXlsxField.
func (mr *MockUserTableColumnsRepoMockRecorder) GetXlsxField(ctx, db, status interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXlsxField", reflect.TypeOf((*MockUserTableColumnsRepo)(nil).GetXlsxField), ctx, db, status)
}

// Insert mocks base method.
func (m *MockUserTableColumnsRepo) Insert(ctx context.Context, tx *gorm.DB, req *org.UserTableColumns) error {

	ret := m.ctrl.Call(m, "Insert", ctx, tx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserTableColumnsRepoMockRecorder) Insert(ctx, tx, req interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserTableColumnsRepo)(nil).Insert), ctx, tx, req)
}

// SelectByID mocks base method.
func (m *MockUserTableColumnsRepo) SelectByID(ctx context.Context, db *gorm.DB, id string) *org.UserTableColumns {

	ret := m.ctrl.Call(m, "SelectByID", ctx, db, id)
	ret0, _ := ret[0].(*org.UserTableColumns)
	return ret0
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockUserTableColumnsRepoMockRecorder) SelectByID(ctx, db, id interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockUserTableColumnsRepo)(nil).SelectByID), ctx, db, id)
}

// SelectByIDAndName mocks base method.
func (m *MockUserTableColumnsRepo) SelectByIDAndName(ctx context.Context, db *gorm.DB, id, name string) *org.UserTableColumns {

	ret := m.ctrl.Call(m, "SelectByIDAndName", ctx, db, id, name)
	ret0, _ := ret[0].(*org.UserTableColumns)
	return ret0
}

// SelectByIDAndName indicates an expected call of SelectByIDAndName.
func (mr *MockUserTableColumnsRepoMockRecorder) SelectByIDAndName(ctx, db, id, name interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByIDAndName", reflect.TypeOf((*MockUserTableColumnsRepo)(nil).SelectByIDAndName), ctx, db, id, name)
}

// Update mocks base method.
func (m *MockUserTableColumnsRepo) Update(ctx context.Context, tx *gorm.DB, req *org.UserTableColumns) error {

	ret := m.ctrl.Call(m, "Update", ctx, tx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserTableColumnsRepoMockRecorder) Update(ctx, tx, req interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserTableColumnsRepo)(nil).Update), ctx, tx, req)
}
