// Code generated by MockGen. DO NOT EDIT.
// Source: user_leader_relation.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	org "github.com/quanxiang-cloud/organizations/internal/models/org"
	gorm "gorm.io/gorm"
)

// MockUserLeaderRelationRepo is a mock of UserLeaderRelationRepo interface.
type MockUserLeaderRelationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserLeaderRelationRepoMockRecorder
}

// MockUserLeaderRelationRepoMockRecorder is the mock recorder for MockUserLeaderRelationRepo.
type MockUserLeaderRelationRepoMockRecorder struct {
	mock *MockUserLeaderRelationRepo
}

// NewMockUserLeaderRelationRepo creates a new mock instance.
func NewMockUserLeaderRelationRepo(ctrl *gomock.Controller) *MockUserLeaderRelationRepo {
	mock := &MockUserLeaderRelationRepo{ctrl: ctrl}
	mock.recorder = &MockUserLeaderRelationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLeaderRelationRepo) EXPECT() *MockUserLeaderRelationRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUserLeaderRelationRepo) Add(tx *gorm.DB, rq *org.UserLeaderRelation) error {

	ret := m.ctrl.Call(m, "Add", tx, rq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUserLeaderRelationRepoMockRecorder) Add(tx, rq interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserLeaderRelationRepo)(nil).Add), tx, rq)
}

// DeleteByUserIDs mocks base method.
func (m *MockUserLeaderRelationRepo) DeleteByUserIDs(tx *gorm.DB, userID ...string) error {

	varargs := []interface{}{tx}
	for _, a := range userID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByUserIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDs indicates an expected call of DeleteByUserIDs.
func (mr *MockUserLeaderRelationRepoMockRecorder) DeleteByUserIDs(tx interface{}, userID ...interface{}) *gomock.Call {

	varargs := append([]interface{}{tx}, userID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDs", reflect.TypeOf((*MockUserLeaderRelationRepo)(nil).DeleteByUserIDs), varargs...)
}

// InsertBranch mocks base method.
func (m *MockUserLeaderRelationRepo) InsertBranch(tx *gorm.DB, req ...org.UserLeaderRelation) error {

	varargs := []interface{}{tx}
	for _, a := range req {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertBranch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBranch indicates an expected call of InsertBranch.
func (mr *MockUserLeaderRelationRepoMockRecorder) InsertBranch(tx interface{}, req ...interface{}) *gomock.Call {

	varargs := append([]interface{}{tx}, req...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBranch", reflect.TypeOf((*MockUserLeaderRelationRepo)(nil).InsertBranch), varargs...)
}

var userLeaderrelations = []org.UserLeaderRelation{{ID: "2", UserID: "2", LeaderID: "1"}}

// SelectByLeaderID mocks base method.
func (m *MockUserLeaderRelationRepo) SelectByLeaderID(db *gorm.DB, leaderID ...string) []org.UserLeaderRelation {

	varargs := []interface{}{db}
	for _, a := range leaderID {
		varargs = append(varargs, a)
	}
	_ = m.ctrl.Call(m, "SelectByLeaderID", varargs...)
	for k := range userLeaderrelations {
		for _, v1 := range leaderID {
			if userLeaderrelations[k].LeaderID == v1 {
				return userLeaderrelations
			}
		}
	}
	return nil
}

// SelectByLeaderID indicates an expected call of SelectByLeaderID.
func (mr *MockUserLeaderRelationRepoMockRecorder) SelectByLeaderID(db interface{}, leaderID ...interface{}) *gomock.Call {

	varargs := append([]interface{}{db}, leaderID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByLeaderID", reflect.TypeOf((*MockUserLeaderRelationRepo)(nil).SelectByLeaderID), varargs...)
}

// SelectByUserIDs mocks base method.
func (m *MockUserLeaderRelationRepo) SelectByUserIDs(db *gorm.DB, userID ...string) []org.UserLeaderRelation {

	varargs := []interface{}{db}
	for _, a := range userID {
		varargs = append(varargs, a)
	}
	_ = m.ctrl.Call(m, "SelectByUserIDs", varargs...)
	for k := range userLeaderrelations {
		for _, v1 := range userID {
			if v1 == userLeaderrelations[k].UserID {
				return userLeaderrelations
			}
		}
	}
	return nil
}

// SelectByUserIDs indicates an expected call of SelectByUserIDs.
func (mr *MockUserLeaderRelationRepoMockRecorder) SelectByUserIDs(db interface{}, userID ...interface{}) *gomock.Call {

	varargs := append([]interface{}{db}, userID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserIDs", reflect.TypeOf((*MockUserLeaderRelationRepo)(nil).SelectByUserIDs), varargs...)
}

// Update mocks base method.
func (m *MockUserLeaderRelationRepo) Update(tx *gorm.DB, rq *org.UserLeaderRelation) error {

	ret := m.ctrl.Call(m, "Update", tx, rq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserLeaderRelationRepoMockRecorder) Update(tx, rq interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserLeaderRelationRepo)(nil).Update), tx, rq)
}
