// Code generated by MockGen. DO NOT EDIT.
// Source: goalie.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	org "github.com/quanxiang-cloud/organizations/internal/models/org"
	gorm "gorm.io/gorm"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

var users = []*org.User{
	{ID: "1", Name: "test1", Email: "test1@test.com", Phone: "13688886666", UseStatus: 1, PasswordStatus: 1},
	{ID: "2", Name: "test2", Email: "test2@test.com", Phone: "13688886668", UseStatus: 1, PasswordStatus: 1},
	{ID: "0", Name: "test0", Email: "test0@test.com", Phone: "13688886660", UseStatus: 1, PasswordStatus: 0},
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockUserRepo) Count(ctx context.Context, db *gorm.DB, status, activeStatus int) (int64, int64) {

	ret := m.ctrl.Call(m, "Count", ctx, db, status, activeStatus)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUserRepoMockRecorder) Count(ctx, db, status, activeStatus interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUserRepo)(nil).Count), ctx, db, status, activeStatus)
}

// Get mocks base method.
func (m *MockUserRepo) Get(ctx context.Context, db *gorm.DB, id string) *org.User {

	_ = m.ctrl.Call(m, "Get", ctx, db, id)
	//ret0, _ := ret[0].(*org.User)
	for k := range users {
		if id == users[k].ID {
			return users[k]
		}
	}
	return nil
}

// Get indicates an expected call of Get.
func (mr *MockUserRepoMockRecorder) Get(ctx, db, id interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUserRepo)(nil).Get), ctx, db, id)
}

// GetColumns mocks base method.
func (m *MockUserRepo) GetColumns(ctx context.Context, db *gorm.DB, user *org.User, schema string) []org.Columns {

	ret := m.ctrl.Call(m, "GetColumns", ctx, db, user, schema)
	ret0, _ := ret[0].([]org.Columns)
	return ret0
}

// GetColumns indicates an expected call of GetColumns.
func (mr *MockUserRepoMockRecorder) GetColumns(ctx, db, user, schema interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumns", reflect.TypeOf((*MockUserRepo)(nil).GetColumns), ctx, db, user, schema)
}

// Insert mocks base method.
func (m *MockUserRepo) Insert(ctx context.Context, tx *gorm.DB, r *org.User) error {

	ret := m.ctrl.Call(m, "Insert", ctx, tx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserRepoMockRecorder) Insert(ctx, tx, r interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRepo)(nil).Insert), ctx, tx, r)
}

// InsertBranch mocks base method.
func (m *MockUserRepo) InsertBranch(tx *gorm.DB, req ...*org.User) error {

	varargs := []interface{}{tx}
	for _, a := range req {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertBranch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBranch indicates an expected call of InsertBranch.
func (mr *MockUserRepoMockRecorder) InsertBranch(tx interface{}, req ...interface{}) *gomock.Call {

	varargs := append([]interface{}{tx}, req...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBranch", reflect.TypeOf((*MockUserRepo)(nil).InsertBranch), varargs...)
}

// List mocks base method.
func (m *MockUserRepo) List(ctx context.Context, db *gorm.DB, id ...string) []*org.User {

	varargs := []interface{}{ctx, db}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	_ = m.ctrl.Call(m, "List", varargs...)
	for k := range users {
		for _, v1 := range id {
			if v1 == users[k].ID {
				return users
			}
		}
	}
	return nil
}

// List indicates an expected call of List.
func (mr *MockUserRepoMockRecorder) List(ctx, db interface{}, id ...interface{}) *gomock.Call {

	varargs := append([]interface{}{ctx, db}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUserRepo)(nil).List), varargs...)
}

// PageList mocks base method.
func (m *MockUserRepo) PageList(ctx context.Context, db *gorm.DB, status, page, limit int, userIDs []string) ([]*org.User, int64) {

	_ = m.ctrl.Call(m, "PageList", ctx, db, status, page, limit, userIDs)

	return users, int64(len(users))
}

// PageList indicates an expected call of PageList.
func (mr *MockUserRepoMockRecorder) PageList(ctx, db, status, page, limit, userIDs interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PageList", reflect.TypeOf((*MockUserRepo)(nil).PageList), ctx, db, status, page, limit, userIDs)
}

// SelectByEmailOrPhone mocks base method.
func (m *MockUserRepo) SelectByEmailOrPhone(ctx context.Context, db *gorm.DB, info string) *org.User {

	ret := m.ctrl.Call(m, "SelectByEmailOrPhone", ctx, db, info)
	ret0, _ := ret[0].(*org.User)
	return ret0
}

// SelectByEmailOrPhone indicates an expected call of SelectByEmailOrPhone.
func (mr *MockUserRepoMockRecorder) SelectByEmailOrPhone(ctx, db, info interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByEmailOrPhone", reflect.TypeOf((*MockUserRepo)(nil).SelectByEmailOrPhone), ctx, db, info)
}

// UpdateByID mocks base method.
func (m *MockUserRepo) UpdateByID(ctx context.Context, tx *gorm.DB, r *org.User) error {

	ret := m.ctrl.Call(m, "UpdateByID", ctx, tx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByID indicates an expected call of UpdateByID.
func (mr *MockUserRepoMockRecorder) UpdateByID(ctx, tx, r interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByID", reflect.TypeOf((*MockUserRepo)(nil).UpdateByID), ctx, tx, r)
}

// MockColumns is a mock of Columns interface.
type MockColumns struct {
	ctrl     *gomock.Controller
	recorder *MockColumnsMockRecorder
}

// MockColumnsMockRecorder is the mock recorder for MockColumns.
type MockColumnsMockRecorder struct {
	mock *MockColumns
}

// NewMockColumns creates a new mock instance.
func NewMockColumns(ctrl *gomock.Controller) *MockColumns {
	mock := &MockColumns{ctrl: ctrl}
	mock.recorder = &MockColumnsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockColumns) EXPECT() *MockColumnsMockRecorder {
	return m.recorder
}

// GetCharacterMaximumLength mocks base method.
func (m *MockColumns) GetCharacterMaximumLength() int {

	ret := m.ctrl.Call(m, "GetCharacterMaximumLength")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCharacterMaximumLength indicates an expected call of GetCharacterMaximumLength.
func (mr *MockColumnsMockRecorder) GetCharacterMaximumLength() *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacterMaximumLength", reflect.TypeOf((*MockColumns)(nil).GetCharacterMaximumLength))
}

// GetColumnName mocks base method.
func (m *MockColumns) GetColumnName() string {

	ret := m.ctrl.Call(m, "GetColumnName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetColumnName indicates an expected call of GetColumnName.
func (mr *MockColumnsMockRecorder) GetColumnName() *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetColumnName", reflect.TypeOf((*MockColumns)(nil).GetColumnName))
}

// GetDataType mocks base method.
func (m *MockColumns) GetDataType() string {

	ret := m.ctrl.Call(m, "GetDataType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDataType indicates an expected call of GetDataType.
func (mr *MockColumnsMockRecorder) GetDataType() *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataType", reflect.TypeOf((*MockColumns)(nil).GetDataType))
}

// GetName mocks base method.
func (m *MockColumns) GetName() string {

	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockColumnsMockRecorder) GetName() *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockColumns)(nil).GetName))
}

// GetNumericScale mocks base method.
func (m *MockColumns) GetNumericScale() int {

	ret := m.ctrl.Call(m, "GetNumericScale")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNumericScale indicates an expected call of GetNumericScale.
func (mr *MockColumnsMockRecorder) GetNumericScale() *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumericScale", reflect.TypeOf((*MockColumns)(nil).GetNumericScale))
}

// New mocks base method.
func (m *MockColumns) New() org.Columns {

	ret := m.ctrl.Call(m, "New")
	ret0, _ := ret[0].(org.Columns)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockColumnsMockRecorder) New() *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockColumns)(nil).New))
}
