// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package org is a generated GoMock package.
package mock

import (
	"github.com/quanxiang-cloud/organizations/internal/models/org"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// DeleteByID mocks base method.
func (m *MockAccountRepo) DeleteByID(db *gorm.DB, id ...string) error {
	varargs := []interface{}{db}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockAccountRepoMockRecorder) DeleteByID(db interface{}, id ...interface{}) *gomock.Call {
	varargs := append([]interface{}{db}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockAccountRepo)(nil).DeleteByID), varargs...)
}

// DeleteByUserID mocks base method.
func (m *MockAccountRepo) DeleteByUserID(db *gorm.DB, id ...string) error {
	varargs := []interface{}{db}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByUserID", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserID indicates an expected call of DeleteByUserID.
func (mr *MockAccountRepoMockRecorder) DeleteByUserID(db interface{}, id ...interface{}) *gomock.Call {
	varargs := append([]interface{}{db}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserID", reflect.TypeOf((*MockAccountRepo)(nil).DeleteByUserID), varargs...)
}

// Insert mocks base method.
func (m *MockAccountRepo) Insert(tx *gorm.DB, req *org.Account) error {
	ret := m.ctrl.Call(m, "Insert", tx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAccountRepoMockRecorder) Insert(tx, req interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAccountRepo)(nil).Insert), tx, req)
}

// InsertBranch mocks base method.
func (m *MockAccountRepo) InsertBranch(tx *gorm.DB, req ...org.Account) error {
	varargs := []interface{}{tx}
	for _, a := range req {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertBranch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBranch indicates an expected call of InsertBranch.
func (mr *MockAccountRepoMockRecorder) InsertBranch(tx interface{}, req ...interface{}) *gomock.Call {
	varargs := append([]interface{}{tx}, req...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBranch", reflect.TypeOf((*MockAccountRepo)(nil).InsertBranch), varargs...)
}

var accs = []org.Account{
	{ID: "1", UserID: "1", Account: "test1@test.com", Password: "24d04ec3c9f0e285791035a47ba3e61a"},
	{ID: "2", UserID: "2", Account: "test2@test.com", Password: "24d04ec3c9f0e285791035a47ba3e61a"},
	{ID: "0", UserID: "0", Account: "test0@test.com", Password: "24d04ec3c9f0e285791035a47ba3e61a"}}

// SelectByAccount mocks base method.
func (m *MockAccountRepo) SelectByAccount(db *gorm.DB, account string) *org.Account {

	_ = m.ctrl.Call(m, "SelectByAccount", db, account)
	for k := range accs {
		if account == accs[k].Account {
			return &accs[k]
		}
	}

	return nil
}

// SelectByAccount indicates an expected call of SelectByAccount.
func (mr *MockAccountRepoMockRecorder) SelectByAccount(db, account interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByAccount", reflect.TypeOf((*MockAccountRepo)(nil).SelectByAccount), db, account)
}

// SelectByUserID mocks base method.
func (m *MockAccountRepo) SelectByUserID(db *gorm.DB, id string) []org.Account {

	_ = m.ctrl.Call(m, "SelectByUserID", db, id)
	for k := range accs {
		if id == accs[k].UserID {
			return []org.Account{accs[k]}
		}
	}
	return nil
}

// SelectByUserID indicates an expected call of SelectByUserID.
func (mr *MockAccountRepoMockRecorder) SelectByUserID(db, id interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserID", reflect.TypeOf((*MockAccountRepo)(nil).SelectByUserID), db, id)
}

// Update mocks base method.
func (m *MockAccountRepo) Update(tx *gorm.DB, res *org.Account) error {

	ret := m.ctrl.Call(m, "Update", tx, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountRepoMockRecorder) Update(tx, res interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountRepo)(nil).Update), tx, res)
}

// UpdatePasswordByUserID mocks base method.
func (m *MockAccountRepo) UpdatePasswordByUserID(tx *gorm.DB, res *org.Account) error {

	ret := m.ctrl.Call(m, "UpdatePasswordByUserID", tx, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePasswordByUserID indicates an expected call of UpdatePasswordByUserID.
func (mr *MockAccountRepoMockRecorder) UpdatePasswordByUserID(tx, res interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePasswordByUserID", reflect.TypeOf((*MockAccountRepo)(nil).UpdatePasswordByUserID), tx, res)
}
