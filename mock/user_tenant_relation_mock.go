// Code generated by MockGen. DO NOT EDIT.
// Source: user_tenant_relation.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	org "github.com/quanxiang-cloud/organizations/internal/models/org"
	gorm "gorm.io/gorm"
)

// MockUserTenantRelationRepo is a mock of UserTenantRelationRepo interface.
type MockUserTenantRelationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserTenantRelationRepoMockRecorder
}

// MockUserTenantRelationRepoMockRecorder is the mock recorder for MockUserTenantRelationRepo.
type MockUserTenantRelationRepoMockRecorder struct {
	mock *MockUserTenantRelationRepo
}

// NewMockUserTenantRelationRepo creates a new mock instance.
func NewMockUserTenantRelationRepo(ctrl *gomock.Controller) *MockUserTenantRelationRepo {
	mock := &MockUserTenantRelationRepo{ctrl: ctrl}
	mock.recorder = &MockUserTenantRelationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserTenantRelationRepo) EXPECT() *MockUserTenantRelationRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUserTenantRelationRepo) Add(ctx context.Context, tx *gorm.DB, rq *org.UserTenantRelation) error {

	ret := m.ctrl.Call(m, "Add", ctx, tx, rq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUserTenantRelationRepoMockRecorder) Add(ctx, tx, rq interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserTenantRelationRepo)(nil).Add), ctx, tx, rq)
}

// DeleteByUserIDAndTenantID mocks base method.
func (m *MockUserTenantRelationRepo) DeleteByUserIDAndTenantID(ctx context.Context, tx *gorm.DB, userID string) error {

	ret := m.ctrl.Call(m, "DeleteByUserIDAndTenantID", ctx, tx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDAndTenantID indicates an expected call of DeleteByUserIDAndTenantID.
func (mr *MockUserTenantRelationRepoMockRecorder) DeleteByUserIDAndTenantID(ctx, tx, userID interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndTenantID", reflect.TypeOf((*MockUserTenantRelationRepo)(nil).DeleteByUserIDAndTenantID), ctx, tx, userID)
}

// DeleteByUserIDs mocks base method.
func (m *MockUserTenantRelationRepo) DeleteByUserIDs(ctx context.Context, tx *gorm.DB, userID ...string) error {

	varargs := []interface{}{ctx, tx}
	for _, a := range userID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByUserIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDs indicates an expected call of DeleteByUserIDs.
func (mr *MockUserTenantRelationRepoMockRecorder) DeleteByUserIDs(ctx, tx interface{}, userID ...interface{}) *gomock.Call {

	varargs := append([]interface{}{ctx, tx}, userID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDs", reflect.TypeOf((*MockUserTenantRelationRepo)(nil).DeleteByUserIDs), varargs...)
}

// InsertBranch mocks base method.
func (m *MockUserTenantRelationRepo) InsertBranch(tx *gorm.DB, req ...org.UserTenantRelation) error {

	varargs := []interface{}{tx}
	for _, a := range req {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertBranch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBranch indicates an expected call of InsertBranch.
func (mr *MockUserTenantRelationRepoMockRecorder) InsertBranch(tx interface{}, req ...interface{}) *gomock.Call {

	varargs := append([]interface{}{tx}, req...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBranch", reflect.TypeOf((*MockUserTenantRelationRepo)(nil).InsertBranch), varargs...)
}

// SelectByUserIDAndTenantID mocks base method.
func (m *MockUserTenantRelationRepo) SelectByUserIDAndTenantID(ctx context.Context, db *gorm.DB, userID string) *org.UserTenantRelation {

	ret := m.ctrl.Call(m, "SelectByUserIDAndTenantID", ctx, db, userID)
	ret0, _ := ret[0].(*org.UserTenantRelation)
	return ret0
}

// SelectByUserIDAndTenantID indicates an expected call of SelectByUserIDAndTenantID.
func (mr *MockUserTenantRelationRepoMockRecorder) SelectByUserIDAndTenantID(ctx, db, userID interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserIDAndTenantID", reflect.TypeOf((*MockUserTenantRelationRepo)(nil).SelectByUserIDAndTenantID), ctx, db, userID)
}

// SelectByUserIDs mocks base method.
func (m *MockUserTenantRelationRepo) SelectByUserIDs(ctx context.Context, db *gorm.DB, userID ...string) []org.UserTenantRelation {

	varargs := []interface{}{ctx, db}
	for _, a := range userID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectByUserIDs", varargs...)
	ret0, _ := ret[0].([]org.UserTenantRelation)
	return ret0
}

// SelectByUserIDs indicates an expected call of SelectByUserIDs.
func (mr *MockUserTenantRelationRepoMockRecorder) SelectByUserIDs(ctx, db interface{}, userID ...interface{}) *gomock.Call {

	varargs := append([]interface{}{ctx, db}, userID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserIDs", reflect.TypeOf((*MockUserTenantRelationRepo)(nil).SelectByUserIDs), varargs...)
}

// Update mocks base method.
func (m *MockUserTenantRelationRepo) Update(ctx context.Context, tx *gorm.DB, rq *org.UserTenantRelation) error {

	ret := m.ctrl.Call(m, "Update", ctx, tx, rq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserTenantRelationRepoMockRecorder) Update(ctx, tx, rq interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserTenantRelationRepo)(nil).Update), ctx, tx, rq)
}
