// Code generated by MockGen. DO NOT EDIT.
// Source: user_department_relation.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	org "github.com/quanxiang-cloud/organizations/internal/models/org"
	gorm "gorm.io/gorm"
)

// MockUserDepartmentRelationRepo is a mock of UserDepartmentRelationRepo interface.
type MockUserDepartmentRelationRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserDepartmentRelationRepoMockRecorder
}

// MockUserDepartmentRelationRepoMockRecorder is the mock recorder for MockUserDepartmentRelationRepo.
type MockUserDepartmentRelationRepoMockRecorder struct {
	mock *MockUserDepartmentRelationRepo
}

// NewMockUserDepartmentRelationRepo creates a new mock instance.
func NewMockUserDepartmentRelationRepo(ctrl *gomock.Controller) *MockUserDepartmentRelationRepo {
	mock := &MockUserDepartmentRelationRepo{ctrl: ctrl}
	mock.recorder = &MockUserDepartmentRelationRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDepartmentRelationRepo) EXPECT() *MockUserDepartmentRelationRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockUserDepartmentRelationRepo) Add(tx *gorm.DB, rq *org.UserDepartmentRelation) error {

	ret := m.ctrl.Call(m, "Add", tx, rq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockUserDepartmentRelationRepoMockRecorder) Add(tx, rq interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockUserDepartmentRelationRepo)(nil).Add), tx, rq)
}

// DeleteByDepIDs mocks base method.
func (m *MockUserDepartmentRelationRepo) DeleteByDepIDs(tx *gorm.DB, depID ...string) error {

	varargs := []interface{}{tx}
	for _, a := range depID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByDepIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByDepIDs indicates an expected call of DeleteByDepIDs.
func (mr *MockUserDepartmentRelationRepoMockRecorder) DeleteByDepIDs(tx interface{}, depID ...interface{}) *gomock.Call {

	varargs := append([]interface{}{tx}, depID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByDepIDs", reflect.TypeOf((*MockUserDepartmentRelationRepo)(nil).DeleteByDepIDs), varargs...)
}

// DeleteByUserIDAndDepID mocks base method.
func (m *MockUserDepartmentRelationRepo) DeleteByUserIDAndDepID(db *gorm.DB, userID, depID string) error {

	ret := m.ctrl.Call(m, "DeleteByUserIDAndDepID", db, userID, depID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDAndDepID indicates an expected call of DeleteByUserIDAndDepID.
func (mr *MockUserDepartmentRelationRepoMockRecorder) DeleteByUserIDAndDepID(db, userID, depID interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDAndDepID", reflect.TypeOf((*MockUserDepartmentRelationRepo)(nil).DeleteByUserIDAndDepID), db, userID, depID)
}

// DeleteByUserIDs mocks base method.
func (m *MockUserDepartmentRelationRepo) DeleteByUserIDs(tx *gorm.DB, userID ...string) error {

	varargs := []interface{}{tx}
	for _, a := range userID {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByUserIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByUserIDs indicates an expected call of DeleteByUserIDs.
func (mr *MockUserDepartmentRelationRepoMockRecorder) DeleteByUserIDs(tx interface{}, userID ...interface{}) *gomock.Call {

	varargs := append([]interface{}{tx}, userID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByUserIDs", reflect.TypeOf((*MockUserDepartmentRelationRepo)(nil).DeleteByUserIDs), varargs...)
}

// InsertBranch mocks base method.
func (m *MockUserDepartmentRelationRepo) InsertBranch(tx *gorm.DB, req ...org.UserDepartmentRelation) error {

	varargs := []interface{}{tx}
	for _, a := range req {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertBranch", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBranch indicates an expected call of InsertBranch.
func (mr *MockUserDepartmentRelationRepoMockRecorder) InsertBranch(tx interface{}, req ...interface{}) *gomock.Call {

	varargs := append([]interface{}{tx}, req...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBranch", reflect.TypeOf((*MockUserDepartmentRelationRepo)(nil).InsertBranch), varargs...)
}

var userDepartmentRelations = []org.UserDepartmentRelation{{ID: "1", UserID: "1", DepID: "1"}, {ID: "2", UserID: "2", DepID: "3"}}

// SelectByDEPID mocks base method.
func (m *MockUserDepartmentRelationRepo) SelectByDEPID(db *gorm.DB, depID ...string) []org.UserDepartmentRelation {

	varargs := []interface{}{db}
	for _, a := range depID {
		varargs = append(varargs, a)
	}
	_ = m.ctrl.Call(m, "SelectByDEPID", varargs...)
	//ret0, _ := ret[0].([]org.UserDepartmentRelation)
	return userDepartmentRelations
}

// SelectByDEPID indicates an expected call of SelectByDEPID.
func (mr *MockUserDepartmentRelationRepoMockRecorder) SelectByDEPID(db interface{}, depID ...interface{}) *gomock.Call {

	varargs := append([]interface{}{db}, depID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByDEPID", reflect.TypeOf((*MockUserDepartmentRelationRepo)(nil).SelectByDEPID), varargs...)
}

// SelectByUserIDAndDepID mocks base method.
func (m *MockUserDepartmentRelationRepo) SelectByUserIDAndDepID(db *gorm.DB, userID, depID string) *org.UserDepartmentRelation {

	_ = m.ctrl.Call(m, "SelectByUserIDAndDepID", db, userID, depID)
	if userID == "1" && depID == "1" {
		return nil
	}
	ret0 := &org.UserDepartmentRelation{}
	ret0.ID = "1"
	ret0.DepID = "1"
	ret0.ID = "1"
	return ret0
}

// SelectByUserIDAndDepID indicates an expected call of SelectByUserIDAndDepID.
func (mr *MockUserDepartmentRelationRepoMockRecorder) SelectByUserIDAndDepID(db, userID, depID interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserIDAndDepID", reflect.TypeOf((*MockUserDepartmentRelationRepo)(nil).SelectByUserIDAndDepID), db, userID, depID)
}

// SelectByUserIDs mocks base method.
func (m *MockUserDepartmentRelationRepo) SelectByUserIDs(db *gorm.DB, userID ...string) []org.UserDepartmentRelation {

	varargs := []interface{}{db}
	for _, a := range userID {
		varargs = append(varargs, a)
	}
	_ = m.ctrl.Call(m, "SelectByUserIDs", varargs...)
	for k := range userDepartmentRelations {
		for _, v1 := range userID {
			if v1 == userDepartmentRelations[k].UserID {
				return userDepartmentRelations
			}
		}
	}
	return nil
}

// SelectByUserIDs indicates an expected call of SelectByUserIDs.
func (mr *MockUserDepartmentRelationRepoMockRecorder) SelectByUserIDs(db interface{}, userID ...interface{}) *gomock.Call {

	varargs := append([]interface{}{db}, userID...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByUserIDs", reflect.TypeOf((*MockUserDepartmentRelationRepo)(nil).SelectByUserIDs), varargs...)
}

// Update mocks base method.
func (m *MockUserDepartmentRelationRepo) Update(tx *gorm.DB, rq *org.UserDepartmentRelation) error {

	ret := m.ctrl.Call(m, "Update", tx, rq)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserDepartmentRelationRepoMockRecorder) Update(tx, rq interface{}) *gomock.Call {

	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDepartmentRelationRepo)(nil).Update), tx, rq)
}
